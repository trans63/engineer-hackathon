{"version":3,"sources":["../server/data.js"],"names":["addSession","getSession","addNotifier","getPolls","getPoll","axios","require","_sessions","_notifiers","poll","polls","id","name","question","percentComplete","status","increments","setInterval","Math","floor","random","length","forEach","notifier","min","token","data","type","cb","push","filters","get","then","Promise","resolve","response","catch","console","log","error","parseInt"],"mappings":"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","file":"data.js","sourcesContent":["const axios = require('axios');\n\n\nconst _sessions = {};\nconst _notifiers = {\n  poll: []\n};\n\n\n\nexport const polls = [\n  {\n    id: '0',\n    name: 'Poll 1',\n    question: 'Who is the next president?',\n    percentComplete: 0,\n    status: 'Waiting'\n  },\n  {\n    id: '1',\n    name: 'Poll 2',\n    question: 'What is for dinner?',\n    percentComplete: 0,\n    status: 'Waiting'\n  },\n  {\n    id: '2',\n    name: 'Poll 3',\n    question: 'Which sponsor is your favorite?',\n    percentComplete: 0,\n    status: 'Waiting'\n  },\n  {\n    id: '3',\n    name: 'Poll 4',\n    question: 'Can you say hi to me?',\n    percentComplete: 0,\n    status: 'Waiting'\n  }\n];\n\nconst increments = [5, 10, 20, 25];\n\nsetInterval(\n  () => {\n    const poll = polls[\n      Math.floor(Math.random() * polls.length)\n    ];\n\n    if (!poll.percentComplete) {\n      poll.status = 'Running';\n    }\n\n    _notifiers.poll.forEach(notifier => notifier(poll));\n  },\n  2000\n);\n\nsetInterval(\n  () => {\n    polls.forEach((poll) => {\n      if (poll.status === 'Running') {\n        if (poll.percentComplete < 100) {\n          poll.percentComplete = Math.min(100, poll.percentComplete +\n            increments[\n              Math.floor(Math.random() * increments.length)\n            ]\n          );\n        } else {\n          poll.percentComplete = 0;\n          poll.status = 'Waiting';\n        }\n        _notifiers.poll.forEach(notifier => notifier(poll));\n      }\n    });\n  },\n  1000\n);\n\nexport function addSession(token, data) {\n  _sessions[token] = data;\n}\n\nexport function getSession(token) {\n  return _sessions[token];\n}\n\nexport function addNotifier(type, cb) {\n  _notifiers[type].push(cb);\n}\n\nexport function getPolls(filters) {\n  return axios.get('http://localhost:3001/state')\n  .then(response => {\n    return Promise.resolve({polls: response.data.polls})\n  })\n  .catch(error => {\n    console.log(error);\n  });\n}\n\nexport function getPoll(id) {\n  // polls.some((t) => {\n  //   if (t.id === id) {\n  //     poll = t;\n  //     return true;\n  //   }\n  //   return false;\n  // });\n  // return Promise.resolve({ poll });\n  return axios.get('http://localhost:3001/state')\n  .then(response => {\n  console.log(id)\n    console.log(response.data.polls[id]);\n    console.log(response.data.polls[parseInt(id)]);\n    return Promise.resolve({poll: response.data.polls[parseInt(id)]})\n  })\n  .catch(error => {\n    console.log(error);\n  });\n}\n\nexport default { addNotifier, addSession, getSession, getPoll, getPolls };\n"]}